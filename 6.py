# -*- coding: utf-8 -*-
"""10.3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1amm0kK9H0ZHs_1S-nySfKWrfllRtyUkj
"""

import re

class CountVectorizer():
   
   def __init__(self, lowercase = True):

       self.lowercase = lowercase
       self.vocabulary = None
       self.clean = clean

   def preprocess(self, corpus):
       # """Проводит препроцессинг корпуса - приведение всех экземпляров к
       # нижнему регистру и удаление всех небуквенных символов,
       # кроме пробелов."""


        if self.lowercase: 

            for i in range(len(corpus)):

                corpus[i] = corpus[i].lower()

        if self.clean:  # удаление символов, за исключением пробелов

            for i in range(len(corpus)):
              
                corpus[i] = re.sub(r"\s", " ", corpus[i]) ​​# whitespace characters = ' '
            
                corpus[i] = re.sub(r" +", " ", corpus[i]) # Соединяем пробелы в один
                
                corpus[i] = re.sub(r"[^a-zA-Zа-яА-Я]", "", corpus[i]) # только буквы, пробелы
     
   def Fitting(self, corpus):
       
       for i in range(len(corpus)): # сплит по " "
   
            corpus[i] = corpus[i].split()

       vocab = []

       for j in corpus:

                if j in vocab:

                    continue

                else:

                    vocab.append(j)

      self._vocabulary = {k: item for k, item in enumerate(vocab)}

      new_dic = []
      for sentence in corpus:
            anothr = []
            for i in self._vocabulary.values():
                anothr.append(sentence.split().count(i))
            new_dic.append(anothr)

      return final


if __name__ == '__main__':
    corpus = [
    'Crock Pot Pasta Never boil pasta again',
    'Pasta Pomodoro Fresh ingredients Parmesan to taste'
    ]

    vectorizer = CountVectorizer()
    count_matrix = vectorizer.fit_transform(corpus)
    print(vectorizer.get_feature_names())
    print(count_matrix)