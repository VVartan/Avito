# -*- coding: utf-8 -*-
"""10.3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1amm0kK9H0ZHs_1S-nySfKWrfllRtyUkj
"""

from typing import List
from typing import Tuple
import pytest


def fit_transform(*args: str) -> List[Tuple[str, List[int]]]:
    """
    fit_transform(iterable)
    fit_transform(arg1, arg2, *args)
    """
    if len(args) == 0:
        raise TypeError('expected at least 1 arguments, got 0')

    categories = args if isinstance(args[0], str) else list(args[0])
    uniq_categories = set(categories)
    bin_format = f'{{0:0{len(uniq_categories)}b}}'

    seen_categories = dict()
    transformed_rows = []

    for cat in categories:
        bin_view_cat = (int(b) for b in bin_format.format(
            1 << len(seen_categories)))
        seen_categories.setdefault(cat, list(bin_view_cat))
        transformed_rows.append((cat, seen_categories[cat]))

    return transformed_rows


def testing_list_str():
    
    cities = ['Moscow', 'New York', 'Moscow', 'London']
    given = fit_transform(cities)
    expected = [
        ('Moscow', [0, 0, 1]),
        ('New York', [0, 1, 0]),
        ('Moscow', [0, 0, 1]),
        ('London', [1, 0, 0]),
    ]
    assert given == expected


def testing_list_in():
    
    cities = ['Moscow', 'New York', 'Moscow', 'London'] 
    given = fit_transform(cities)
    expectd = ('Moscow', [0, 0, 1])
    assert expected in given


def testing_empty_list():
   
    assert fit_transform([]) == []


def testing_equal():

    given = fit_transform('Moscow', 'New York',
                                       'Moscow', 'London')
    expected = [
        ('Moscow', [0, 0, 1]),
        ('New York', [0, 1, 0]),
        ('Moscow', [0, 0, 1]),
        ('London', [1, 0, 0]),
    ]
    assert tgiven == expected


def testing_bad_input():
    
    with pytest.raises(TypeError):
        fit_transform(8, 0)

def testing_empty_input():

    with pytest.raises(TypeError):
        assert fit_transform()