# -*- coding: utf-8 -*-
"""10.3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1amm0kK9H0ZHs_1S-nySfKWrfllRtyUkj
"""

import unittest
from unittest.mock import patch 
from what_is_year_now import what_is_year_now
import urllib.request
import io



YMD_SEP = '-'
YMD_SEP_INDEX = 4
YMD_YEAR_SLICE = slice(None, YMD_SEP_INDEX)

DMY_SEP = '.'
DMY_SEP_INDEX = 5
DMY_YEAR_SLICE = slice(DMY_SEP_INDEX + 1, DMY_SEP_INDEX + 5)


def what_is_year_now() -> int:
    """
    Получает текущее время из API-worldclock
    и извлекает из поля 'currentDateTime' год
    Предположим, что currentDateTime может быть в двух форматах:
      * YYYY-MM-DD - 2019-03-01
      * DD.MM.YYYY - 01.03.2019
    """
    with urllib.request.urlopen(API_URL) as resp:
        resp_json = json.load(resp)

    datetime_str = resp_json['currentDateTime']
    if datetime_str[YMD_SEP_INDEX] == YMD_SEP:
        year_str = datetime_str[YMD_YEAR_SLICE]
    elif datetime_str[DMY_SEP_INDEX] == DMY_SEP:
        year_str = datetime_str[DMY_YEAR_SLICE]
    else:
        raise ValueError('Invalid format')

    return int(year_str)


def testing_complete data(self):
       
    dict_for_json = '{"currentDateTime": "2020"}'

    with patch.object(
        urllib.request, "urlopen",return_value=io.StringIO(dict_for_json)
        ):
            with self.assertRaises(IndexError):
                what_is_year_now()


def test_wrong_format(self):
         
    dict_json = '{"currentDateTime": "21.12.2020"}'

    with patch.object(
         urllib.request, "urlopen", return_value=io.StringIO(dict_json)
        ):
            with self.assertRaises(ValueError):
                what_is_year_now()

def testing_point(self):
      
    dict_for_json = '{"currentDateTime": "21.12.2020"}'

    with patch.object(
             urllib.request, "urlopen", return_value=io.StringIO(dict_for_json)
        ):
            actual = what_is_year_now()
        expected = 2020
        self.assertEqual(actual, expected)